<!DOCTYPE html>
<!--[if IE 8]><html class="ie ie8"> </html><![endif]-->
<!--[if IE 9]><html class="ie ie9"> </html><![endif]-->
<!--[if gt IE 9]><!-->	<html> <!--<![endif]-->
<head>
<!-- Original URL: http://www.tutorialspoint.com./swing_quick_guide.htm
Date Downloaded: 2015-05-08 11:38:29 AM !-->
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<!-- Basic -->
<meta charset="utf-8" />
<title>SWING Quick Guide</title>
<meta name="Description" content="Swing Quick Guide -  Learn Swing Framework in simple and easy steps using this beginner's tutorial containing basic to advanced knowledge starting from Environment Setup, Swing, Graphical User Interface, Swing Controls, Event Handling, Event Classes, Event listener interfaces, Layout Managers, Adapters, Layouts, Menus" />
<meta name="Keywords" content="Swing, Graphical User Interface, Swing Controls, Event Handling, Event Classes, Event listener interfaces, Layout Managers, Adapters, Layouts, Menus " />

<link rel="shortcut icon" href="../cdn/favicon.png" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes" />
<meta name="author" content="tutorialspoint.com" />
<meta property="fb:app_id" content="471319149685276" />
<script type="text/javascript" src="../cdn/theme/js/script-min-v1.js"></script>
<link rel="stylesheet" href="../cdn/theme/css/style-min-v1.css" />
<link rel="stylesheet" href="../css/tomorrow-night.css" />
<!--[if IE]>
<link rel="stylesheet" href="../cdn/theme/css/ie.css" />
<![endif]-->
<!--[if lte IE 8]>
<script src="../cdn/theme/vendor/respond.js"></script>
<![endif]-->
<!--[if IE]>
<link rel="stylesheet" href="../cdn/theme/css/ie.css" />
<![endif]-->
<!--[if lte IE 8]>
<script src="../cdn/theme/vendor/respond.js"></script>
<![endif]-->
<!--[if IE 8]>
<link rel="stylesheet" type="text/css" href="../cdn/theme/css/ie8.css" />
<![endif]-->
<!--[if IE 9]>
<link rel="stylesheet" type="text/css" href="../cdn/theme/css/ie9.css" />
<![endif]-->
<!-- Front Page related changes -->
<style>




img.mobile-apps { border: 1px solid #507a9b !important; }
footer i.icon, footer ul.list.icons li i { color: #507a9b !important; }
button.btn-responsive-nav, header div.search button.btn-default { background: #507a9b !important;}
.social-icons-top { display:none; }
</style>
</head>
<script>
$(document).ready(function() {
  $('input[name="q"]').keydown(function(event){
    if(event.keyCode == 13) {
      event.preventDefault();
      return false;
    }
  });
});
</script>
<body onload="prettyPrint()">
<div class="wrapLoader">
   <div class="imgLoader">
      <img src="../cdn/images/loading-cg.gif" alt="" width="70" height="70" />
   </div>
</div>
<div id="divGoogle"></div>
<div class="body">
<header>
   <div class="container">			
      <h1 class="logo">
      <a href="index.htm" title="tutorialspoint">
      <img alt="JavaDox" src="../images/logo.png" />
      </a>
      </h1>			
      <div class="search" id="searchBar">
         <form method="get" id="searchform" name="searchform" action="http://www.google.com/search" target="_blank">
            <input type="hidden" name="sitesearch" value="www.tutorialspoint.com" />
            <div class="input-group">
               <input type="text" class="form-control search" name="q" id="q" autocomplete="off" placeholder="Search your tutorials..." onfocus="if (this.value == 'Search your tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your tutorials...';}" />
               <input value="FORID:11" name="cof" type="hidden" />
               <input type="hidden" name="ie" value="ISO-8859-1" />
               <span class="input-group-btn"> <button class="btn btn-default" type="submit" onclick="javascript:void(0);"><i class="icon icon-search"></i></button> </span>
            </div>
         </form>
      </div>
      <nav>
         <ul class="nav nav-pills nav-top">
            <li><a id="free-training-icon" href="absoluteclasses.htm"><img src="../cdn/images/free-training.jpg" style="width:100px; position:absolute;left:-158px; top:-7px; z-index:99;" title="Free Online Training" /></a></li>
            <li> <a href="shared-tutorials.php"><i class="icon icon-user"></i> &nbsp;Shared</a> </li>
            <li> <a href="shorttutorials"><i class="icon icon-file-text-o"></i> &nbsp;Articles</a> </li>
            <li>
            <div class="social-icons social-icons-top">
               <ul class="social-icons">
               <li class="facebook"><a href="http://www.facebook.com/tutorialspointindia" target="_blank" title="Facebook">Facebook</a></li>
               <li class="twitter"><a href="http://www.twitter.com/tutorialspoint" target="_blank" title="Twitter">Twitter</a></li>
               <li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
               <li class="linkedin"><a href="http://www.linkedin.com/company/tutorialspoint" target="_blank" title="tutorialspoint @ Linkedin">Linkedin</a></li>
               </ul>
            </div>
            </li>
         </ul>
      </nav>
         <!-- search code here  --> 
      <button class="btn btn-responsive-nav btn-inverse" data-toggle="collapse" data-target=".nav-main-collapse" id="pull"> <i class="icon icon-bars"></i> </button>
   </div>
   <div class="navbar nav-main">
      <div class="container">
         <nav class="nav-main mega-menu">
            <ul class="nav nav-pills nav-main" id="mainMenu">
               <li class="dropdown"> <a class="dropdown" href="index.htm"><i class="icon icon-home"></i> Home</a> </li>   
               <li class="dropdown"><a class="dropdown-toggle tut-lib" href="tutorialslibrary.htm"> Tutorials Library </a>
      <ul class="dropdown-menu" id="submenu">
         <li>
            <div class="mega-menu-content">
              <div class="row">
                 <div class="col-md-6">
                    <ul class="sub-menu">
                     <li><a href="academic_tutorials.htm">Academic</a></li>
                     <li><a href="big_data_tutorials.htm">Big Data</a></li>
                     <li><a href="database_tutorials.htm">Databases</a></li>
                     <li><a href="java_technology_tutorials.htm">Java Technologies</a></li>
                     <li><a href="mainframe_tutorials.htm">Mainframe</a></li>
                     <li><a href="management_tutorials.htm">Management</a></li>
                     <li><a href="microsoft_technologies_tutorials.htm">Microsoft Technologies</a></li>
                     <li><a href="misc_tutorials.htm">Miscellaneous</a></li>
                   </ul>
                 </div>
                 <div class="col-md-6">
                  <ul class="sub-menu">
                     <li><a href="mobile_development_tutorials.htm">Mobile Development</a></li>
                     <li><a href="computer_programming_tutorials.htm">Programming</a></li>
                     <li><a href="scripting_lnaguage_tutorials.htm">Scripts</a></li>
                     <li><a href="software_quality_tutorials.htm">Software Quality</a></li>
                     <li><a href="telecom_tutorials.htm">Telecom</a></li>
                     <li><a href="web_development_tutorials.htm">Web Development</a></li>
                     <li><a href="xml_technologies_tutorials.htm">XML Technologies</a></li>
                     <li><a href="multi_language_tutorials.htm">Multi Language Tutorials</a></li>
                  </ul>
                 </div>
              </div>
            </div>
         </li>
       </ul>
               </li>
               <li class="dropdown"><a class="dropdown" href="codingground.htm"><i class="fa-code"></i> Coding Ground</a> </li>
                  <li class="dropdown"> 							
                     <a class="dropdown-toggle tut-plus" href="absoluteclasses.htm">Absolute Classes</a>                     <ul class="dropdown-menu" id="submenu1">
                                                <li class="current-menu-ancestor current-menu-parent active dropdown-submenu" style="border-bottom:none;">
                        </li><li style="border-bottom:none;"><a href="absoluteclasses/userlogin.htm"><i class="fa-sign-in"></i>&nbsp;Login</a></li>
                        <li style="border-bottom:1px dashed #ccc; height:1px; padding:0px; margin:0px 10px 0px 10px" class="stickyhide">&nbsp;</li>
                        <li><a href="absoluteclasses/usersignup.htm"><i class="fa-pencil-square-o"></i>&nbsp;Sign Up&nbsp;</a></li>
                        <li style="border-bottom:none;"><a href="absoluteclasses/upcomingclasses.htm" style="border-bottom:none;"><i class="fa-book book-head"></i> Upcoming Classes </a></li>
                        <li style="border-bottom:1px dashed #ccc; height:1px; padding:0px; margin:0px 10px 0px 10px">&nbsp;</li>
                        <li style="border-bottom:1px dashed #ccc; height:1px; padding:0px; margin:0px 10px 0px 10px">&nbsp;</li>
                        <li style="border-bottom:1px dashed #ccc;;"><a href="absoluteclasses/allcourses.htm" style="border-bottom:none;"><i class="fa-book book-head"></i> All Courses </a></li>
                        <li style="border-bottom:1px dashed #ccc;;"><a href="absoluteclasses/testimonials.htm" style="border-bottom:none;"><i class="fa-check check"></i> Testimonial</a></li>
                        <li style="border-bottom:1px dashed #ccc;;"><a href="absoluteclasses/help.htm" style="border-bottom:none;"><i class="fa-question book-head"></i> Help/FAQ</a></li>
                        <li style="border-bottom:none;"><a href="absoluteclasses/contact_abc.htm" style="border-bottom:none;"><i class="fa fa-envelope-o"></i> Contact</a></li>
                                             
                     </ul>
                  
            </li></ul>
         </nav>
      </div>
   </div>	
</header>
<div style="clear:both;"></div>
<div role="main" class="main">
<div class="container">
<div class="row">
<div class="col-md-2">
<aside class="sidebar">
<div class="mini-logo">
<img src="../images/java-mini-logo.png" alt="Swing Tutorial" />
</div>
<ul class="nav nav-list primary left-menu"><li><a target="_top" href="../index.htm"><b>Back to Home</b></a></li></ul><ul class="nav nav-list primary left-menu">
<li class="heading">SWING GUI Library</li>

<li><a target="_top" href="swing_overview.htm">SWING - Overview</a></li>
<li><a target="_top" href="swing_environment.htm">SWING - Environment</a></li>
<li><a target="_top" href="swing_controls.htm">SWING - Controls</a></li>
<li><a target="_top" href="swing_event_handling.htm">SWING - Event Handling</a></li>
<li><a target="_top" href="swing_event_classes.htm">SWING - Event Classes</a></li>
<li><a target="_top" href="swing_event_listeners.htm">SWING - Event Listeners</a></li>
<li><a target="_top" href="swing_event_adapters.htm">SWING - Event Adapters</a></li>
<li><a target="_top" href="swing_layouts.htm">SWING - Layouts</a></li>
<li><a target="_top" href="swing_menu.htm">SWING - Menu</a></li>
<li><a target="_top" href="swing_containers.htm">SWING - Containers</a></li>
</ul>


</aside>
</div>
<!-- PRINTING STARTS HERE -->
<div class="row">
<div class="content">
<div class="col-md-7 middle-col">
<h1>SWING - Quick Guide</h1>
<div class="topgooglead">
<hr />
<div style="padding-bottom:5px;padding-left:10px;">Advertisements</div>
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 468;
google_ad_height = 60;
google_ad_format = "468x60_as";
google_ad_type = "image";
google_ad_channel = "";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/f.txt.js"></script></div> 
<div class="pre-btn">
<a href="swing_containers.htm"> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="swing_useful_resources.htm">Next Page &nbsp;</a>
</div>
<div class="clearer"></div>
<hr />
<h1>SWING - Overview</h1>
<p>Swing API is set of extensible GUI Components to ease developer's life to create JAVA based Front End/ GUI Applications. It is build upon top of AWT API and acts as replacement of AWT API as it has almost every control corresponding to AWT controls. Swing component follows a Model-View-Controller architecture to fulfill the following criterias.</p>
<ul class="list">
<li><p>A single API is to be sufficient to support multiple look and feel.</p></li>
<li><p>API is to model driven so that highest level API is not required to have the data.</p></li>
<li><p>API is to use the Java Bean model so that Builder Tools and IDE can provide better services to the developers to use it.</p></li>
</ul>
<h2>MVC Architecture</h2>
<p>Swing API architecture follows loosely based MVC architecture in the following manner.</p>
<ul class="list">
<li><p>A Model represents component's data.</p></li>
<li><p>View represents visual representation of the component's data.</p></li>
<li><p>Controller takes the input from the user on the view and reflects the changes in Component's data.</p></li>
<li><p>Swing component have Model as a seperate element and View and Controller part are clubbed in User Interface elements. Using this way, Swing has pluggable look-and-feel architecture.</p></li>
</ul>
<h2>Swing features</h2>
<ul class="list">
<li><p><b>Light Weight</b> - Swing component are independent of native Operating System's API as Swing API controls are rendered mostly using pure JAVA code instead of underlying operating system calls.</p></li>
<li><p><b>Rich controls</b> - Swing provides a rich set of advanced controls like Tree, TabbedPane, slider, colorpicker, table controls</p></li>
<li><p><b>Highly Customizable</b> - Swing controls can be customized in very easy way as visual apperance is independent of internal representation.</p></li>
<li><p><b>Pluggable look-and-feel</b>- SWING based GUI Application look and feel can be changed at run time based on available values.</p></li>
</ul>
<h1>SWING - Environment</h1>
<p>This section guides you on how to download and set up Java on your machine. Please follow the following steps to set up the environment.</p>
<p>Java SE is freely available from the link <a href="http://java.sun.com/javase/downloads/index_jdk5.jsp" target="_blank">Download Java</a>. So you download a version based on your operating system.</p>
<p>Follow the instructions to download java and run the <b>.exe</b> to install Java on your machine. Once you installed Java on your machine, you would need to set environment variables to point to correct installation directories:</p>
<h2>Setting up the path for windows 2000/XP:</h2>
<p>Assuming you have installed Java in <i>c:\Program Files\java\jdk</i> directory:</p>
<ul class="list">
<li><p>Right-click on 'My Computer' and select 'Properties'. </p></li>
<li><p>Click on the 'Environment variables' button under the 'Advanced' tab.</p></li>
<li><p>Now alter the 'Path' variable so that it also contains the path to the Java executable. Example, if the path is currently set to 'C:\WINDOWS\SYSTEM32', then change your path to read 'C:\WINDOWS\SYSTEM32;c:\Program Files\java\jdk\bin'.</p></li>
</ul>
<h2>Setting up the path for windows 95/98/ME:</h2>
<p>Assuming you have installed Java in <i>c:\Program Files\java\jdk</i> directory:</p>
<ul class="list">
<li><p>Edit the 'C:\autoexec.bat' file and add the following line at the end: <br />'SET PATH=%PATH%;C:\Program Files\java\jdk\bin'</p></li>
</ul>
<h2>Setting up the path for Linux, UNIX, Solaris, FreeBSD:</h2>
<p>Environment variable PATH should be set to point to where the java binaries have been installed. Refer to your shell documentation if you have trouble doing this.</p>
<p>Example, if you use <i>bash</i> as your shell, then you would add the following line to the end of your '.bashrc: export PATH=/path/to/java:$PATH'</p>
<h2>Popular Java Editors:</h2>
<p>To write your java programs you will need a text editor. There are even more sophisticated IDE available in the market. But for now, you can consider one of the following:</p>
<ul class="list">
<li><p><b>Notepad:</b> On Windows machine you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad.</p></li>
<li><p><b>Netbeans:</b>is a Java IDE that is open source and free which can be downloaded from <a href="http://www.netbeans.org/index.html" target="_blank">http://www.netbeans.org/index.html</a>.</p></li>
<li><p><b>Eclipse:</b> is also a java IDE developed by the eclipse open source community and can be downloaded from <a href="http://www.eclipse.org/" target="_blank">http://www.eclipse.org/</a>.</p></li>
</ul>
<h1>SWING - Controls</h1>
<p>Every user interface considers the following three main aspects:</p>
<ul class="list">
<li><p><b>UI elements</b> : Thes are the core visual elements the user eventually sees and interacts with. GWT provides a huge list of widely used and common elements varying from basic to complex which we will cover in this tutorial.</p></li>
<li><p><b>Layouts:</b> They define how UI elements should be organized on the screen and provide a final look and feel to the GUI (Graphical User Interface). This part will be covered in Layout chapter.</p></li>
<li><p><b>Behavior:</b> These are events which occur when the user interacts with UI elements. This part will be covered in Event Handling chapter.</p></li>
</ul>
<img src="images/swing_class_hierarchy.jpg" alt="UI classes" />
<p>Every SWING controls inherits properties from following Component class hiearchy.</p>
<table class="table table-bordered">
<tr>
<th>Sr. No.</th>
<th>Class &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><a href="swing_component.htm">Component</a><p>A Container is the abstract base class for the non menu user-interface controls of SWING. Component represents an object with graphical representation</p></td>
</tr>
<tr>
<td>2</td>
<td><a href="swing_container.htm">Container</a><p>A Container is a component that can contain other SWING components.</p></td>
</tr>
<tr><td>3</td><td><a href="swing_jcomponent.htm">JComponent</a><p>A JComponent is a base class for all swing UI components. In order to use a swing component that inherits from JComponent, component must be in a containment hierarchy whose root is a top-level Swing container.</p></td></tr>
</table>
<h2>SWING UI Elements:</h2>
<p>Following is the list of commonly used controls while designed GUI using SWING.</p>
<table class="table table-bordered">
<tr>
<th>Sr. No.</th>
<th>Control &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><a href="swing_jlabel.htm">JLabel</a><p>A JLabel object is a component for placing text in a container.</p></td>
</tr>
<tr>
<td>2</td>
<td><a href="swing_jbutton.htm">JButton</a><p>This class creates a labeled button.</p></td>
</tr>
<tr>
<td>3</td>
<td><a href="swing_jcolorchooser.htm">JColorChooser</a><p>A JColorChooser provides a pane of controls designed to allow a user to manipulate and select a color.</p></td>
</tr>
<tr>
<td>4</td>
<td><a href="swing_jcheckbox.htm">JCheck Box</a><p>A JCheckBox is a graphical component that can be in either an <b>on</b> (true) or <b>off</b> (false) state.</p></td>
</tr>
<tr>
<td>5</td>
<td><a href="swing_jradiobutton.htm">JRadioButton</a><p>The JRadioButton class is a graphical component that can be in either an <b>on</b> (true) or <b>off</b> (false) state. in a group.</p></td>
</tr>
<tr>
<td>6</td>
<td><a href="swing_jlist.htm">JList</a><p>A JList component presents the user with a scrolling list of text items.</p></td>
</tr>
<tr>
<td>7</td>
<td><a href="swing_jcombobox.htm">JComboBox</a><p>A JComboBox component presents the user with a to show up menu of choices.</p></td>
</tr>
<tr>
<td>8</td>
<td><a href="swing_jtextfield.htm">JTextField</a><p>A JTextField object is a text component that allows for the editing of a single line of text.</p></td>
</tr>
<tr>
<td>9</td>
<td><a href="./swing_jpasswordfield.htm">JPasswordField</a><p>A JPasswordField object is a text component specialized for password entry.</p></td>
</tr>
<tr>
<td>10</td>
<td><a href="swing_jtextarea.htm">JTextArea</a><p>A JTextArea object is a text component that allows for the editing of a multiple lines of text.</p></td>
</tr>
<tr>
<td>11</td>
<td><a href="swing_imageicon.htm">ImageIcon</a><p>A ImageIcon control is an implementation of the Icon interface that paints Icons from Images</p></td>
</tr>
<tr>
<td>12</td>
<td><a href="swing_jscrollbar.htm">JScrollbar</a><p>A Scrollbar control represents a scroll bar component in order to enable user to select from range of values.</p></td>
</tr>
<tr>
<td>13</td>
<td><a href="swing_joptionpane.htm">JOptionPane</a><p>JOptionPane provides set of standard dialog boxes that prompt users for a value or informs them of something.</p></td>
</tr>
<tr>
<td>14</td>
<td><a href="swing_jfilechooser.htm">JFileChooser</a><p>A JFileChooser control represents a dialog window from which the user can select a file.</p></td>
</tr>
<tr>
<td>15</td>
<td><a href="swing_jprogressbar.htm">JProgressBar</a><p>As the task progresses towards completion, the progress bar displays the task's percentage of completion.</p></td>
</tr>
<tr>
<td>16</td>
<td><a href="swing_jslider.htm">JSlider</a><p>A JSlider lets the user graphically select a value by sliding a knob within a bounded interval.</p></td>
</tr>
<tr>
<td>17</td>
<td><a href="swing_jspinner.htm">JSpinner</a><p>A JSpinner is a single line input field that lets the user select a number or an object value from an ordered sequence.</p></td>
</tr>
</table>
<h1>SWING - Event Handling</h1>
<h2>What is an Event?</h2>
<p>Change in the state of an object is known as event i.e. event describes the change in state of source. Events are generated as result of user interaction with the graphical user interface components. For example, clicking on a button, moving the mouse, entering a character through keyboard,selecting an item from list, scrolling the page are the activities that causes an event to happen.</p>
<h2>Types of Event </h2>
<p>The events can be broadly classified into two categories:</p>
<ul class="list">
<li><p><b>Foreground Events</b> - Those  events which require the direct interaction of user.They are generated as consequences of a person interacting with the graphical  components in  Graphical User Interface. For example, clicking on a button, moving the mouse, entering a character through keyboard,selecting an item from list, scrolling the page etc.</p></li>
<li><p><b>Background Events</b> - Those events that  require the interaction of end user are known as background events. Operating system interrupts, hardware or software failure, timer expires, an operation completion are the example of background events.</p></li>
</ul>
<h2>What is Event Handling?</h2>
<p>Event Handling is the mechanism that controls the event and decides what should happen if an event occurs. This mechanism have the code which is known as  event handler that is executed when an event occurs. Java Uses the Delegation Event Model to handle the events. This model defines the standard mechanism to generate and handle the events.Let's have a brief introduction to this model.</p>
<p>The Delegation Event Model  has the following key participants namely:</p>
<ul class="list">
<li><p><b>Source</b> - The source is an object on which event occurs. Source is responsible for providing information of the occurred event to it's handler. Java provide as with classes for source object.</p></li>
<li><p><b>Listener</b> - It is also known as event handler.Listener is responsible for generating response to an event. From java implementation point of view the listener is also an object. Listener waits until it receives an event. Once the event is received , the listener process the event an then returns. </p></li>
</ul>
<p>The benefit of this approach is that the user interface logic is completely separated from the logic that generates the event. The user interface element is able to delegate the processing of an event to the separate piece of code. In this model ,Listener needs to be registered with the source object so that the listener can receive the event notification. This is an efficient way of handling the event because the event notifications are sent only to those listener  that want to receive them.</p>
<h2>Steps involved in event handling </h2>
<ul class="list">
<li><p>The User clicks the button and the event is generated. </p></li>
<li><p>Now the object of concerned event class is created automatically and information about the source and the event get populated with in same object. </p></li>
<li><p>Event object is forwarded to the method of registered listener class. </p></li>
<li><p>the method is now get executed and returns. </p></li>
</ul>
<h2>Points to remember about listener </h2>
<ul class="list">
<li><p>In order to design a listener class we have to develop some listener interfaces.These Listener interfaces forecast some public abstract callback methods which must be implemented by the listener class.</p></li>
<li><p>If you do not implement the any if the predefined interfaces then your class can not act as a listener class for a source object.</p></li>
</ul>
<h2>Callback Methods</h2>
<p>These are the methods that are provided by API provider and are defined by the application programmer and invoked by the application developer. Here the callback methods represents an event method. In response to an event java jre will fire callback method. All such callback methods are provided in listener interfaces.</p>
<p>If a component wants some listener will listen to it's events the the source must register itself to the listener.</p>
<h2>Event Handling Example</h2>
<p>Create the following java program using any editor of your choice in say <b>D:/ &gt; SWING &gt; com &gt; tutorialspoint &gt; gui &gt;</b></p>
<i>SwingControlDemo.java</i>
<pre class="prettyprint notranslate">
package com.tutorialspoint.gui;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class SwingControlDemo {

   private JFrame mainFrame;
   private JLabel headerLabel;
   private JLabel statusLabel;
   private JPanel controlPanel;

   public SwingControlDemo(){
      prepareGUI();
   }

   public static void main(String[] args){
      SwingControlDemo swingControlDemo = new SwingControlDemo();  
      swingControlDemo.showEventDemo();       
   }
      
   private void prepareGUI(){
      mainFrame = new JFrame("Java SWING Examples");
      mainFrame.setSize(400,400);
      mainFrame.setLayout(new GridLayout(3, 1));

      headerLabel = new JLabel("",JLabel.CENTER );
      statusLabel = new JLabel("",JLabel.CENTER);        

      statusLabel.setSize(350,100);
      mainFrame.addWindowListener(new WindowAdapter() {
         public void windowClosing(WindowEvent windowEvent){
	        System.exit(0);
         }        
      });    
      controlPanel = new JPanel();
      controlPanel.setLayout(new FlowLayout());

      mainFrame.add(headerLabel);
      mainFrame.add(controlPanel);
      mainFrame.add(statusLabel);
      mainFrame.setVisible(true);  
   }

   private void showEventDemo(){
      headerLabel.setText("Control in action: Button"); 

      JButton okButton = new JButton("OK");
      JButton submitButton = new JButton("Submit");
      JButton cancelButton = new JButton("Cancel");

      okButton.setActionCommand("OK");
      submitButton.setActionCommand("Submit");
      cancelButton.setActionCommand("Cancel");

      okButton.addActionListener(new ButtonClickListener()); 
      submitButton.addActionListener(new ButtonClickListener()); 
      cancelButton.addActionListener(new ButtonClickListener()); 

      controlPanel.add(okButton);
      controlPanel.add(submitButton);
      controlPanel.add(cancelButton);       

      mainFrame.setVisible(true);  
   }

   private class ButtonClickListener implements ActionListener{
      public void actionPerformed(ActionEvent e) {
         String command = e.getActionCommand();  
         if( command.equals( "OK" ))  {
            statusLabel.setText("Ok Button clicked.");
         }
         else if( command.equals( "Submit" ) )  {
            statusLabel.setText("Submit Button clicked."); 
         }
         else  {
            statusLabel.setText("Cancel Button clicked.");
         }  	
      }		
   }
}
</pre>
<p>Compile the program using command prompt. Go to <b>D:/ &gt; SWING</b> and type the following command.</p>
<pre class="prettyprint notranslate">
D:\AWT>javac com\tutorialspoint\gui\SwingControlDemo.java
</pre>
<p>If no error comes that means compilation is successful. Run the program using following command.</p>
<pre class="prettyprint notranslate">
D:\AWT>java com.tutorialspoint.gui.SwingControlDemo
</pre>
<p>Verify the following output</p>
<img src="/swing/images/swing_button.jpg" alt="SWING  Event Handling" />	
<h1>SWING - Event Classes</h1>
<p>The Event classes represent the event. Java provides us various Event classes but we will discuss those which are more frequently used.</p>
<h2>EventObject class</h2>
<p>It is the root class from which all event state objects shall be derived. All Events are constructed with a reference to the object, the <b>source</b>, that is logically deemed to be the object upon which the Event in question initially occurred upon.
This class is defined in java.util package.</p>
<h2>Class declaration</h2>
<p>Following is the declaration for <b>java.util.EventObject</b> class:</p>
<pre class="prettyprint notranslate">
public class EventObject
   extends Object
      implements Serializable
</pre>
<h2>Field</h2>
<p>Following are the fields for <b>java.util.EventObject</b> class:</p>
<ul class="list">
<li><p><b>protected Object source</b> -- The object on which the Event initially occurred. 	</p></li>
</ul>
<h2>Class constructors</h2>
<table class="table table-bordered">
<tr>
<th style="width:5%">S.N.</th>
<th>Constructor &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><b>EventObject(Object source) </b><p>Constructs a prototypical Event.</p></td>
</tr>
</table>
<h2>Class methods</h2>
<table class="table table-bordered">
<tr>
<th style="width:5%">S.N.</th>
<th>Method &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><b>Object getSource()</b><p>The object on which the Event initially occurred.</p></td>
</tr>
<tr>
<td>2</td>
<td><b>String	toString()</b><p>Returns a String representation of this EventObject.</p></td>
</tr>
</table>
<h2>Methods inherited</h2>
<p>This class inherits methods from the following classes:</p>
<ul class="list">
<li><p>java.lang.Object</p></li>
</ul>
<h2>SWING Event Classes:</h2>
<p>Following is the list of commonly used event classes.</p>
<table class="table table-bordered">
<tr>
<th>Sr. No.</th>
<th>Control &amp; Description</th>
</tr>
<tr><td>1</td><td><a href="./swing_awt_event.htm">AWTEvent</a><p>It is the root event class for all SWING events. This class and its subclasses supercede the original java.awt.Event class.</p></td>
</tr>
<tr>
<td>2</td>
<td><a href="./swing_action_event.htm">ActionEvent</a><p>The ActionEvent is generated when button is clicked or the item of a list is double clicked.</p></td>
</tr>
<tr>
<td>3</td>
<td><a href="./swing_input_event.htm">InputEvent</a><p>The InputEvent class is root event class for all component-level input events.</p></td>
</tr>
<tr>
<td>4</td>
<td><a href="./swing_key_event.htm">KeyEvent</a><p>On entering the character the Key event is generated.</p></td>
</tr>
<tr>
<td>5</td>
<td><a href="./swing_mouse_event.htm">MouseEvent</a><p>This event indicates a mouse action occurred in a component.</p></td>
</tr>
<tr>
<td>6</td>
<td><a href="./swing_window_event.htm">WindowEvent</a><p>The object of this class represents the change in state of a window.</p></td>
</tr>
<tr>
<td>7</td>
<td><a href="./swing_adjustment_event.htm">AdjustmentEvent</a><p>The object of this class represents the adjustment event emitted by Adjustable objects.</p></td>
</tr>
<tr>
<td>8</td>
<td><a href="./swing_component_event.htm">ComponentEvent</a><p>The object of this class represents the change in state of a window.</p></td>
</tr>
<tr>
<td>9</td>
<td><a href="./swing_container_event.htm">ContainerEvent</a><p>The object of this class represents the change in state of a window.</p></td>
</tr>
<tr>
<td>10</td>
<td><a href="./swing_mousemotion_event.htm">MouseMotionEvent</a><p>The object of this class represents the change in state of a window.</p></td>
</tr>
<tr>
<td>11</td>
<td><a href="./swing_paint_event.htm">PaintEvent</a><p>The object of this class represents the change in state of a window.</p></td>
</tr>
</table>
<h1>SWING - Event Listeners</h1>
<p>The Event listener represent the interfaces responsible to handle events. Java provides us various Event listener classes but we will discuss those which are more frequently used. Every method of an event listener method has a single argument as an object which is subclass of EventObject class. For example, mouse event listener methods will accept  instance of MouseEvent, where MouseEvent derives from EventObject.</p>
<h2>EventListner interface</h2>
<p>It is a marker interface which every listener interface has to extend.This class is defined in java.util package.</p>
<h2>Class declaration</h2>
<p>Following is the declaration for <b>java.util.EventListener</b> interface:</p>
<pre class="prettyprint notranslate">
public interface EventListener
</pre>
<h2>SWING Event Listener Interfaces:</h2>
<p>Following is the list of commonly used event listeners.</p>
<table class="table table-bordered">
<tr>
<th>Sr. No.</th>
td><a href="./swing_action_listener.htm">ActionListener</a><p>This interface is used for receiving the action events.</p>
</tr>
<tr>
<td>2</td>
<td><a href="./swing_component_listener.htm">ComponentListener</a><p>This interface is used for receiving the component events.</p></td>
</tr>
<tr>
<td>3</td>
<td><a href="./swing_item_listener.htm">ItemListener</a><p>This interface is used for receiving the item events.</p></td>
</tr>
<tr>
<td>4</td>
<td><a href="./swing_key_listener.htm">KeyListener</a><p>This interface is used for receiving the key events.</p></td>
</tr>
<tr>
<td>5</td>
<td><a href="./swing_mouse_listener.htm">MouseListener</a><p>This interface is used for receiving the mouse events.</p></td>
</tr>
<tr>
<td>6</td>
<td><a href="./swing_window_listener.htm">WindowListener</a><p>This interface is used for receiving the window events.</p></td>
</tr>
<tr>
<td>7</td>
<td><a href="./swing_adjustment_listener.htm">AdjustmentListener</a><p>This interface is used for receiving the adjusmtent events.</p></td>
</tr>
<tr>
<td>8</td>
<td><a href="./swing_container_listener.htm">ContainerListener</a><p>This interface is used for receiving the container events.</p></td>
</tr>
<tr>
<td>9</td>
<td><a href="./swing_mousemotion_listener.htm">MouseMotionListener</a><p>This interface is used for receiving the mouse motion events.</p></td>
</tr>
<tr>
<td>10</td>
<td><a href="./swing_focus_listener.htm">FocusListener</a><p>This interface is used for receiving the focus events.</p></td>
</tr>
</table>
<h1>SWING - Event Adapters</h1>
<p>Adapters are abstract classes for receiving various events. The methods in these classes are empty. These classes exists as convenience for creating listener objects.</p>
<h2>SWING Adapters:</h2>
<p>Following is the list of commonly used adapters while listening GUI events in SWING.</p>
<table class="table table-bordered">
<tr>
<th>Sr. No.</th>
<th>Adapter &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><a href="./swing_focusadapter.htm">FocusAdapter</a><p>An abstract adapter class for receiving focus events.</p></td>
</tr>
<tr>
<td>2</td>
<td><a href="./swing_keyadapter.htm">KeyAdapter</a><p>An abstract adapter class for receiving key events.</p></td>
</tr>
<tr>
<td>3</td>
<td><a href="./swing_mouseadapter.htm">MouseAdapter</a><p>An abstract adapter class for receiving mouse events.</p></td>
</tr>
<tr>
<td>4</td>
<td><a href="./swing_mousemotionadapter.htm">MouseMotionAdapter</a><p>An abstract adapter class for receiving mouse motion events.</p></td>
</tr>
<tr>
<td>5</td>
<td><a href="./swing_windowadapter.htm">WindowAdapter</a><p>An abstract adapter class for receiving window events.</p></td>
</tr>
</table>
<h1>SWING - Layouts</h1>
<h2>Introduction</h2>
<p>Layout means the arrangement of components within the container. In other way we can say that placing the components at a particular position within the container. The task of layouting the controls is done automatically by the Layout Manager.</p>
<h2>Layout Manager</h2>
<p>The layout manager automatically positions all the components within the container. If we do not use layout manager then also the components are positioned by the default layout manager. It is possible to layout the controls by hand but it becomes very difficult because of the following two reasons. </p>
<ul class="list">
<li><p>It is very tedious to handle a large number of controls within the container. </p></li>
<li><p>Oftenly the width and height information of a component is not given when we need to arrange them.</p></li>
</ul>
<p>Java provide us with various layout manager to position the controls. The properties like size,shape and arrangement varies from one layout manager to other layout manager. When the size of the applet or the application window changes the size, shape and arrangement of the components also changes in response i.e. the layout managers adapt to the dimensions of appletviewer or the application window.</p>
<p>The layout manager is associated with every Container object. Each layout manager is an object of the class that implements the LayoutManager interface.</p>
<p>Following are the interfaces defining functionalities of Layout Managers.</p>
<table class="table table-bordered">
<tr>
<th>Sr. No.</th>
<th>Interface &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><a href="./swing_layoutmanager.htm">LayoutManager</a><p>The LayoutManager interface declares those methods which need to be implemented by the class whose object will act as a layout manager.</p></td>
</tr>
<tr>
<td>2</td>
<td><a href="./swing_layoutmanager2.htm">LayoutManager2</a><p>The LayoutManager2 is the sub-interface of the LayoutManager. This interface is for those classes that know how to layout containers based on layout constraint object.</p></td>
</tr>
</table>
<h2>AWT Layout Manager Classes:</h2>
<p>Following is the list of commonly used controls while designed GUI using AWT.</p>
<table class="table table-bordered">
<tr>
<th>Sr. No.</th>
<th>LayoutManager &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><a href="./swing_borderlayout.htm">BorderLayout</a><p>The borderlayout arranges the components to fit in the five regions: east, west, north, south and center.</p></td>
</tr>
<tr>
<td>2</td>
<td><a href="./swing_cardlayout.htm">CardLayout</a><p>The CardLayout object treats each component in the container as a card. Only one card is visible at a time.</p></td>
</tr>
<tr>
<td>3</td>
<td><a href="./swing_flowlayout.htm">FlowLayout</a><p>The FlowLayout is the default layout.It layouts the components in a directional flow.</p></td>
</tr>
<tr>
<td>4</td>
<td><a href="./swing_gridlayout.htm">GridLayout</a><p>The GridLayout manages the components in form of a rectangular grid.</p></td>
</tr>
<tr>
<td>5</td>
<td><a href="./swing_gridbaglayout.htm">GridBagLayout</a><p>This is the most flexible layout manager class.The object of GridBagLayout aligns the component vertically,horizontally or along their baseline without  requiring the components of same size.</p></td>
</tr>
<tr>
<td>6</td>
<td><a href="./swing_grouplayout.htm">GroupLayout</a><p>The GroupLayout hierarchically groups components in order to position them in a Container.</p></td>
</tr>
<tr>
<td>7</td>
<td><a href="./swing_springlayout.htm">SpringLayout</a><p>A SpringLayout positions the children of its associated container according to a set of constraints.</p></td>
</tr>
</table>
<h1>SWING - Menu</h1>
<p>As we know that every top-level window has a menu bar associated with it. This menu bar consist of various menu choices available to the end user. Further each choice contains list of options which is called drop down menus. Menu and MenuItem controls are subclass of MenuComponent class.</p>
<h2>Menu Hiearchy</h2>
<img src="/swing/images/swing_menuhiearchy.jpg" alt="Swing Menu Hiearchy" />
<h2>Menu Controls</h2>
<table class="table table-bordered">
<tr>
<th>Sr. No.</th>
<th>Control &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><a href="./swing_jmenubar_control.htm">JMenuBar</a><p>The JMenuBar object is associated with the top-level window.</p></td>
</tr>
<tr>
<td>2</td>
<td><a href="./swing_jmenuitem_control.htm">JMenuItem</a><p>The items in the menu must belong to the JMenuItem or any of its subclass.</p></td>
</tr>
<tr>
<td>3</td>
<td><a href="./swing_jmenu_control.htm">JMenu</a><p>The JMenu object is a pull-down menu component which is displayed from the menu bar.</p></td>
</tr>
<tr>
<td>4</td>
<td><a href="./swing_jcheckboxmenuitem_control.htm">JCheckboxMenuItem</a><p>JCheckboxMenuItem is subclass of JMenuItem.</p></td>
</tr>
<tr>
<td>5</td>
<td><a href="./swing_jradiobuttonmenuitem_control.htm">JRadioButtonMenuItem</a><p>JRadioButtonMenuItem is subclass of JMenuItem.</p></td>
</tr>
<tr>
<td>6</td>
<td><a href="./swing_jpopupmenu_control.htm">JPopupMenu</a><p>JPopupMenu can be dynamically popped up at a specified position within a component.</p></td>
</tr>
</table>
<h1>SWING - Containers</h1>
<h2>Introduction</h2>
<p>The class <b>Container</b> is the super class for the containers of AWT. Container object can contain other AWT components.</p>
<h2>Class declaration</h2>
<p>Following is the declaration for <b>java.awt.Container</b> class:</p>
<pre class="prettyprint notranslate">
public class Container
   extends Component
</pre>
<h2>Class constructors</h2>
<table class="table table-bordered">
<tr>
<th style="width:5%">S.N.</th>
<th>Constructor &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><b>Container() </b><p>This creates a new Container.</p></td>
</tr>
</table>
<h2>Class methods</h2>
<table class="table table-bordered">
<tr>
<th style="width:5%">S.N.</th>
<th>Method &amp; Description</th>
</tr>
<tr>
<td>1</td>
<td><b>Component add(Component comp) </b><p>Appends the specified component to the end of this container.</p></td></tr>
<tr>
<td>2</td>
<td><b>Component add(Component comp, int index) </b><p>Adds the specified component to this container at the given position.</p></td>
</tr>
<tr>
<td>3</td>
<td><b>void add(Component comp, Object constraints) </b><p>Adds the specified component to the end of this container.</p></td>
</tr>
<tr>
<td>4</td>
<td><b>void add(Component comp, Object constraints, int index) </b><p>Adds the specified component to this container with the specified constraints at the specified index.</p></td>
</tr>
<tr>
<td>5</td>
<td><b>Component add(String name, Component comp) </b><p>Adds the specified component to this container.</p></td>
</tr>
<tr>
<td>6</td>
<td><b>void addContainerListener(ContainerListener l) </b><p>Adds the specified container listener to receive container events from this container.</p></td>
</tr>
<tr>
<td>7</td>
<td><b>protected void addImpl(Component comp, Object constraints, int index) </b><p>Adds the specified component to this container at the specified index.</p></td>
</tr>
<tr>
<td>8</td>
<td><b>void addNotify() </b><p>Makes this Container displayable by connecting it to a native screen resource.</p></td>
</tr>
<tr>
<td>9</td>
<td><b>void addPropertyChangeListener(PropertyChangeListener listener) </b><p>Adds a PropertyChangeListener to the listener list.</p></td>
</tr>
<tr>
<td>10</td>
<td><b>void addPropertyChangeListener(String propertyName, PropertyChangeListener listener) </b><p>Adds a PropertyChangeListener to the listener list for a specific property.</p></td>
</tr>
<tr>
<td>11</td>
<td><b>void applyComponentOrientation(ComponentOrientation o) </b><p>Sets the ComponentOrientation property of this container and all components contained within it.</p></td>
</tr>
<tr>
<td>12</td>
<td><b>boolean areFocusTraversalKeysSet(int id) </b><p>Returns whether the Set of focus traversal keys for the given focus traversal operation has been explicitly defined for this Container.</p></td>
</tr>
<tr>
<td>13</td>
<td><b>int countComponents() </b><p>Deprecated. As of JDK version 1.1, replaced by getComponentCount().</p></td>
</tr>
<tr>
<td>14</td>
<td><b>void deliverEvent(Event e) </b><p>Deprecated. As of JDK version 1.1, replaced by dispatchEvent(AWTEvent e)</p></td>
</tr>
<tr>
<td>15</td>
<td><b>void doLayout() </b><p>Causes this container to lay out its components.</p></td>
</tr>
<tr>
<td>16</td>
<td><b>Component findComponentAt(int x, int y) </b><p>Locates the visible child component that contains the specified position.</p></td>
</tr>
<tr>
<td>17</td>
<td><b>Component findComponentAt(Point p) </b><p>Locates the visible child component that contains the specified point.</p></td>
</tr>
<tr>
<td>18</td>
<td><b>float getAlignmentX() </b><p>Returns the alignment along the x axis.</p></td>
</tr>
<tr>
<td>19</td>
<td><b>float getAlignmentY() </b><p>Returns the alignment along the y axis.</p></td>
</tr>
<tr>
<td>20</td>
<td><b>Component getComponent(int n) </b><p>Gets the nth component in this container.</p></td>
</tr>
<tr>
<td>21</td>
<td><b>Component getComponentAt(int x, int y) </b><p>Locates the component that contains the x,y position.</p></td>
</tr>
<tr>
<td>22</td>
<td><b>Component getComponentAt(Point p) </b><p>Gets the component that contains the specified point.</p></td>
</tr>
<tr>
<td>23</td>
<td><b>int getComponentCount() </b><p>Gets the number of components in this panel.</p></td>
</tr>
<tr>
<td>24</td>
<td><b>Component[] getComponents() </b><p>Gets all the components in this container.</p></td>
</tr>
<tr>
<td>25</td>
<td><b>int getComponentZOrder(Component comp) </b><p>Returns the z-order index of the component inside the container.</p></td>
</tr>
<tr>
<td>26</td>
<td><b>ContainerListener[] getContainerListeners() </b><p>Returns an array of all the container listeners registered on this container.</p></td>
</tr>
<tr>
<td>27</td>
<td><b>Set&lt;AWTKeyStroke&gt; getFocusTraversalKeys(int id) </b><p>Returns the Set of focus traversal keys for a given traversal operation for this Container.</p></td>
</tr>
<tr>
<td>28</td>
<td><b>FocusTraversalPolicy getFocusTraversalPolicy() </b><p>Returns the focus traversal policy that will manage keyboard traversal of this Container's children, or null if this Container is not a focus cycle root.</p></td>
</tr>
<tr>
<td>29</td>
<td><b>Insets getInsets() </b><p>Determines the insets of this container, which indicate the size of the container's border.</p></td>
</tr>
<tr>
<td>30</td>
<td><b>LayoutManager getLayout() </b><p>Gets the layout manager for this container.</p></td>
</tr>
<tr>
<td>31</td>
<td><b>&lt;T extends EventListener&gt; T[] getListeners(Class&lt;T&gt; listenerType) </b>
<p>Returns an array of all the objects currently registered as FooListeners upon this Container.</p></td>
</tr>
<tr>
<td>32</td>
<td><b>Dimension	getMaximumSize() </b><p>Returns the maximum size of this container.</p></td>
</tr>
<tr>
<td>33</td>
<td><b>Dimension	getMinimumSize() </b><p>Returns the minimum size of this container.</p></td>
</tr>
<tr>
<td>34</td>
<td><b>Point	getMousePosition(boolean allowChildren) </b><p>Returns the position of the mouse pointer in this Container's coordinate space if the Container is under the mouse pointer, otherwise returns null.</p></td>
</tr>
<tr>
<td>35</td>
<td><b>Dimension	getPreferredSize() </b><p>Returns the preferred size of this container.</p></td>
</tr>
<tr>
<td>36</td>
<td><b>Insets insets() </b><p>Deprecated. As of JDK version 1.1, replaced by getInsets().</p></td>
</tr>
<tr>
<td>37</td>
<td><b>void invalidate() </b><p>Invalidates the container.</p></td>
</tr>
<tr>
<td>38</td>
<td><b>boolean isAncestorOf(Component c) </b><p>Checks if the component is contained in the component hierarchy of this container.</p></td>
</tr>
<tr>
<td>39</td>
<td><b>boolean isFocusCycleRoot() </b><p>Returns whether this Container is the root of a focus traversal cycle.</p></td>
</tr>
<tr>
<td>40</td>
<td><b>boolean isFocusCycleRoot(Container container) </b><p>Returns whether the specified Container is the focus cycle root of this Container's focus traversal cycle.</p></td>
</tr>
<tr>
<td>41</td>
<td><b>boolean isFocusTraversalPolicyProvider() </b><p>Returns whether this container provides focus traversal policy.</p></td>
</tr>
<tr>
<td>42</td>
<td><b>boolean isFocusTraversalPolicySet() </b><p>Returns whether the focus traversal policy has been explicitly set for this Container.</p></td>
</tr>
<tr>
<td>43</td>
<td><b>void layout() </b><p>Deprecated. As of JDK version 1.1, replaced by doLayout().</p></td>
</tr>
<tr>
<td>44</td>
<td><b>void list(PrintStream out, int indent) </b><p>Prints a listing of this container to the specified output stream.</p></td>
</tr>
<tr>
<td>45</td>
<td><b>void list(PrintWriter out, int indent) </b><p>Prints out a list, starting at the specified indentation, to the specified print writer.</p></td>
</tr>
<tr>
<td>46</td>
<td><b>Component locate(int x, int y) </b><p>Deprecated. As of JDK version 1.1, replaced by getComponentAt(int, int).</p></td>
</tr>
<tr>
<td>47</td>
<td><b>Dimension minimumSize() </b><p>Deprecated. As of JDK version 1.1, replaced by getMinimumSize().</p></td>
</tr>
<tr>
<td>48</td>
<td><b>void paint(Graphics g) </b><p>Paints the container.</p></td>
</tr>
<tr>
<td>49</td>
<td><b>void paintComponents(Graphics g) </b><p>Paints each of the components in this container.</p></td>
</tr>
<tr>
<td>50</td>
<td><b>protected  String	paramString() </b><p> Returns a string representing the state of this Container.</p></td>
</tr>
<tr>
<td>51</td>
<td><b>Dimension	preferredSize() </b><p>Deprecated. As of JDK version 1.1, replaced by getPreferredSize().</p></td>
</tr>
<tr>
<td>52</td>
<td><b>void print(Graphics g) </b><p>Prints the container.</p></td>
</tr>
<tr>
<td>53</td>
<td><b>void printComponents(Graphics g) </b><p>Prints each of the components in this container.</p></td>
</tr>
<tr>
<td>54</td>
<td><b>protected void processContainerEvent(ContainerEvent e) </b><p>Processes container events occurring on this container by dispatching them to any registered ContainerListener objects.</p></td>
</tr>
<tr>
<td>55</td>
<td><b>protected void processEvent(AWTEvent e) </b><p>Processes events on this container.</p></td>
</tr>
<tr>
<td>56</td>
<td><b>void remove(Component comp) </b><p>Removes the specified component from this container.</p></td>
</tr>
<tr>
<td>57</td>
<td><b>void remove(int index) </b><p>Removes the component, specified by index, from this container.</p></td>
</tr>
<tr>
<td>58</td>
<td><b>void removeAll() </b><p>Removes all the components from this container.</p></td>
</tr>
<tr>
<td>59</td>
<td><b>void removeContainerListener(ContainerListener l) </b><p>Removes the specified container listener so it no longer receives container events from this container.</p></td>
</tr>
<tr>
<td>60</td>
<td><b>void removeNotify() </b><p>Makes this Container undisplayable by removing its connection to its native screen resource.</p></td>
</tr>
<tr>
<td>61</td>
<td><b>void setComponentZOrder(Component comp, int index) </b><p>Moves the specified component to the specified z-order index in the container.</p></td>
</tr>
<tr>
<td>62</td>
<td><b>void setFocusCycleRoot(boolean focusCycleRoot) </b><p>Sets whether this Container is the root of a focus traversal cycle.</p></td>
</tr>
<tr>
<td>63</td>
<td><b>void setFocusTraversalKeys(int id, Set&lt;? extends AWTKeyStroke&gt; keystrokes) </b><p>Sets the focus traversal keys for a given traversal operation for this Container.</p></td>
</tr>
<tr>
<td>64</td>
<td><b>void setFocusTraversalPolicy(FocusTraversalPolicy policy) </b><p>Sets the focus traversal policy that will manage keyboard traversal of this Container's children, if this Container is a focus cycle root.</p></td>
</tr>
<tr>
<td>65</td>
<td><b>void setFocusTraversalPolicyProvider(boolean provider) </b><p>Sets whether this container will be used to provide focus traversal policy.</p></td>
</tr>
<tr>
<td>66</td>
<td><b>void setFont(Font f) </b><p>Sets the font of this container.</p></td>
</tr>
<tr>
<td>67</td>
<td><b>void setLayout(LayoutManager mgr) </b><p>Sets the layout manager for this container.</p></td>
</tr>
<tr>
<td>68</td>
<td><b>void transferFocusBackward() </b><p>Transfers the focus to the previous component, as though this Component were the focus owner.</p></td>
</tr>
<tr>
<td>69</td>
<td><b>void transferFocusDownCycle() </b><p>Transfers the focus down one focus traversal cycle.</p></td>
</tr>
<tr>
<td>70</td>
<td><b>void update(Graphics g) </b><p>Updates the container.</p></td>
</tr>
<tr>
<td>71</td>
<td><b>void validate() </b><p>Validates this container and all of its subcomponents.</p></td>
</tr>
<tr>
<td>72</td>
<td><b>protected void validateTree() </b><p>Recursively descends the container tree and recomputes the layout for any subtrees marked as needing it (those marked as invalid).</p></td>
</tr>
</table>
<h2>Methods inherited</h2>
<p>This class inherits methods from the following classes:</p>
<ul class="list">
<li><p>java.awt.Component</p></li>
<li><p>java.lang.Object</p></li>
</ul>
<hr style="margin-bottom:1.25% !important;"><div class="pre-btn">
<a href="swing_containers.htm"> Previous Page</a>
</div>
<div class="print-btn center">
<a href="/cgi-bin/printpage.cgi" target="_blank Print</a>
</div>
<div class="nxt-btn">
<a href="swing_useful_resources.htm">Next Page &nbsp;</a>
</div>
<hr />
<!-- PRINTING ENDS HERE -->
<div class="bottomgooglead">
<div class="bottomadtag">Advertisements</div>
<script type="text/javascript"><!--
var width = 580;
var height = 400;
var format = "580x400_as";
if( window.innerWidth < 468 ){
   width = 300;
   height = 250;
   format = "300x250_as";
}
google_ad_client = "pub-7133395778201029";
google_ad_width = width;
google_ad_height = height;
google_ad_format = format;
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/f.txt.js">
</script>
</div>
</div>
</div>
<div class="row">
<div class="col-md-3" id="rightbar">
<!-- AddThis Button BEGIN -->
<!--
<div class="simple-ad">
<div class="addthis_sharing_toolbox"></div>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4f661ec623a400f0"></script>
</div>
-->
<!-- AddThis Button END -->
<!--
<div class="google-ad" style="position:relative; left:20px;">Advertisements</div>
-->
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 250;
google_ad_format = "300x250_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/f.txt.js">
</script>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "pub-7133395778201029";
google_ad_width = 300;
google_ad_height = 600;
google_ad_format = "300x600_as";
google_ad_type = "image";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/f.txt.js">
</script>
</div>
<div class="rightgooglead">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-2537027957187252";
/* Right Side Ad */
google_ad_slot = "right_side_ad";
google_ad_width = 300;
google_ad_height = 250;
//-->
</script>
<script type="text/javascript" src="../../pagead2.googlesyndication.com/pagead/f.txt.js">
</script>
</div>
</div>
</div>
</div>
</div>
</div>
<footer class="inner">
<div class="container">
<div class="row">
<div class="footer-ribon">
<span>Extras</span>
</div>
<div class="col-md-2">
<h4>Mobile First</h4>
<ul class="list icons list-unstyled">
<li><a id="iphone" href="https://itunes.apple.com/om/app/tutorials-point/id914891263?mt=8" target="_blank" rel="nofollow"><img alt="tutorialspoint iPhone App" src="../cdn/images/apple_store.jpg" class="mobile-apps" /></a></li>
<li><a id="android" href="https://play.google.com/store/apps/details?id=com.tutorialspoint.onlineviewer" target="_blank" rel="nofollow"><img alt="tutorialspoint Android app" src="../cdn/images/google_play.jpg" class="mobile-apps" /></a></li>
<li><a id="microsoft" href="http://www.windowsphone.com/s?appid=91249671-7184-4ad6-8a5f-d11847946b09" target="_blank" rel="nofollow"><img alt="tutorialspoint Windows app" src="../cdn/images/windows_store.jpg" class="mobile-apps" /></a></li>
</ul>
</div>
<div class="col-md-2">
<h4>About us</h4>
<ul class="list icons list-unstyled">
<li><i class="icon icon-caret-right"></i> <a href="/about/index.htm">Company</a></li>
<li><i class="icon icon-caret-right"></i> <a href="/about/about_team.htm">Team</a></li>
<li><i class="icon icon-caret-right"></i> <a href="/about/about_careers.htm">Careers</a></li>
<li><i class="icon icon-caret-right"></i> <a href="/about/about_privacy.htm">Privacy Policy</a></li>
<li><i class="icon icon-caret-right"></i> <a href="/about/about_terms_of_use.htm">Terms of use</a></li>
</ul>
</div>
<div class="col-md-2">
<h4>Extra Links</h4>
<ul class="list icons list-unstyled">
<li><i class="icon icon-caret-right"></i> <a href="forums/index.php">Forums</a></li>
<li><i class="icon icon-caret-right"></i> <a href="shorttutorials/">Articles</a></li>
<li><i class="icon icon-caret-right"></i> <a href="shared-tutorials.php">Shared</a></li>
<li><i class="icon icon-caret-right"></i> <a href="seo_tools.htm">Seo Tools</a></li>
<li><i class="icon icon-caret-right"></i> <a href="about/contact_us.htm">Contact</a></li>
</ul>
</div>
<div class="col-md-3">
<div class="contact-details">
<h4>Contact Us</h4>
<ul class="contact">
<li><p><i class="icon icon-map-marker"></i> <strong>Address:</strong> 388-A , Road no 22, Jubilee Hills, Hyderabad Telangana, INDIA-500033</p></li>
<li><p><i class="icon icon-envelope"></i> <strong>Email:</strong> <a href="about/contact_us.htm">Click Here</a></p></li>
<li><p><i class="icon icon-dribbble"></i> <strong>Website:</strong> <a href="http://www.tutorialspoint.com">www.tutorialspoint.com</a></p></li>
</ul>
</div>
<div class="social-icons">
<ul class="social-icons">
<li class="facebook"><a href="https://www.facebook.com/tutorialspointindia" target="_blank" data-placement="bottom" title="tutorialspoint @ Facebook">Facebook</a></li>
<li class="googleplus"><a href="https://plus.google.com/u/0/116678774017490391259/posts" target="_blank" data-placement="bottom" title="tutorialspoint @ Google+">Google+</a></li>
<li class="twitter"><a href="http://www.twitter.com/tutorialspoint" target="_blank" data-placement="bottom" title="tutorialspoint @ Twitter">Twitter</a></li>
<li class="linkedin"><a href="http://www.linkedin.com/company/tutorialspoint" target="_blank" data-placement="bottom" title="tutorialspoint @ Linkedin">Linkedin</a></li>
<li class="rss"><a href="http://feeds.feedburner.com/SharedTutorials" target="_blank" data-placement="bottom" title="tutorialspoint RSS">RSS</a></li>
</ul>
</div>
</div>
</div>
</div>
<div class="footer-copyright">
<div class="container">
<div class="row">
<div class="col-md-1">
<a href="index.htm" class="logo">
<img alt="Tutorials Point" class="img-responsive" src="../cdn/scripts/img/logo-footer.png" />
</a>
</div>
<div class="col-md-6">
<p>&copy; Copyright 2015. All Rights Reserved.</p>
</div>
<div class="col-md-4">
<nav id="sub-menu">
<ul>
<li><a href="/about/tutorials_writing.htm">Write for us</a></li>
<li><a href="/about/faq.htm">FAQ's</a></li>
<li><a href="/about/about_helping.htm">Helping</a></li>
<li><a href="/about/contact_us.htm">Contact</a></li>
</ul>
</nav>
</div>
</div>
</div>
</div>
</footer>
</div>
<!-- Libs -->
<script type="text/javascript" src="../cdn/theme/js/custom-min.js"></script>
<script src="../../www.google-analytics.com/urchin.js">
</script>
<script type="text/javascript">
_uacct = "UA-232293-6";
urchinTracker();
$('.pg-icon').click(function(){
   $('.wrapLoader').show();
});
</script>
</div>
</body>
</html>
